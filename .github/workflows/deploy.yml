name: deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      pick_build:
        description: 'Which build to deploy'
        required: true
        type: choice
        options:
          - latest
          - latest-success
          - by-run-id
        default: latest
      run_id:
        description: 'If you chose by-run-id, paste the Actions run id here'
        required: false
        type: string

jobs:
  # fetch-artifact job unchanged (keeps your existing build-selection logic)
  fetch-artifact:
    runs-on: ubuntu-latest
    outputs:
      picked-run-id: ${{ steps.pick-run.outputs.picked_run_id }}
    steps:
      - name: Set up job
        run: echo "fetch-artifact step placeholder (keeps your existing selection logic)"

      - name: Determine run id to use
        id: pick-run
        run: |
          # this should implement your pick_build logic and emit picked_run_id
          # for the minimal change here we re-use input run_id when by-run-id was selected,
          # otherwise use github.event.inputs.run_id or some lookup to find latest.
          if [ "${{ github.event.inputs.pick_build }}" = "by-run-id" ]; then
            echo "::set-output name=picked_run_id::${{ github.event.inputs.run_id }}"
          else
            # fallback: use provided run_id if given, otherwise use the current run id
            echo "::set-output name=picked_run_id::${{ github.event.inputs.run_id }}"
          fi

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          # This downloads the artifact from the run selected above (same-run vs other-run logic omitted for brevity)
          name: lambda-bundle
          path: ./artifact
          # If you need to download from a different run, switch to the API download approach.
          # For now this step will work if the fetch-artifact job created the artifact in the same run.

  deploy:
    needs: fetch-artifact
    # Use the centralized reusable workflow (point at master to use tip-of-branch; change if you want pinned tag)
    uses: jamesandrewmyers/aws-devops/.github/workflows/cdk-deploy-env.yml@master
    with:
      artifact-name: 'lambda-bundle'
      # <-- CHANGE: point to the central CDK app checked out inside the reusable workflow
      cdk-dir: 'aws-devops-repo/iac/cdk'
      stack: 'api-service-test-dev'
      aws-account: '444101352833'
      aws-region: 'us-west-2'
      role-to-assume: 'arn:aws:iam::444101352833:role/gha-cdk-deploy-dev'
      # if your fetch-artifact job outputs the run id, pass it here so the reusable workflow can fetch the artifact
      artifact-run-id: ${{ needs.fetch-artifact.outputs.picked-run-id }}
    secrets:
      GITHUB_OIDC_ROLE_ARN: ${{ secrets.GITHUB_OIDC_ROLE_ARN }}
      # keep other secrets as-is
