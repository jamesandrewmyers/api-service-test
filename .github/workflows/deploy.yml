name: deploy
on:
  workflow_dispatch:
    inputs:
      pick_build:
        description: 'Which build to deploy'
        required: true
        type: choice
        options:
          - latest
          - latest-success
          - by-run-id
        default: latest
      run_id:
        description: 'If you chose by-run-id, paste the Actions run id here'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  fetch-artifact:
    runs-on: ubuntu-latest
    outputs:
      selected_run_id: ${{ steps.find_run.outputs.run_id }}
    steps:
      - name: Determine run id to use
        id: find_run
        run: |
          set -euo pipefail
          repo="${GITHUB_REPOSITORY}"
          branch="master"   # change if needed
          pick="${{ github.event.inputs.pick_build }}"
          provided_run="${{ github.event.inputs.run_id || '' }}"

          if [ "$pick" = "by-run-id" ]; then
            if [ -z "$provided_run" ]; then
              echo "ERROR: pick_build=by-run-id but no run_id provided" >&2
              exit 1
            fi
            echo "run_id=$provided_run" >> $GITHUB_OUTPUT
            exit 0
          fi

          api="https://api.github.com/repos/$repo/actions/workflows/ci.yml/runs?branch=$branch&per_page=50"
          echo "querying $api"
          run_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$api" | jq -r '.workflow_runs[] | select(.conclusion=="success") | .id' | head -n1)

          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            run_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$api" | jq -r '.workflow_runs[0].id' || true)
          fi

          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "No runs found for workflow ci.yml on branch $branch" >&2
            exit 1
          fi

          echo "Selected run_id=$run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: List artifacts for the selected run and download via API (robust)
        id: download_art
        run: |
          set -euo pipefail
          repo="${GITHUB_REPOSITORY}"
          name="lambda-bundle"
          run_id="${{ steps.find_run.outputs.run_id }}"
          ARTIFACTS_JSON="/tmp/artifacts.json"

          api="https://api.github.com/repos/$repo/actions/runs/$run_id/artifacts"
          echo "Listing artifacts for run $run_id via $api"

          # fetch JSON
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$api" -o "$ARTIFACTS_JSON" || true

          echo "---- artifacts.json (first 300 chars) ----"
          head -c 300 "$ARTIFACTS_JSON" || true
          echo
          echo "-----------------------------------------"

          # Ensure file exists and is non-empty
          if [ ! -s "$ARTIFACTS_JSON" ]; then
            echo "ERROR: artifacts JSON is empty or missing for run $run_id" >&2
            exit 1
          fi

          # try object shape first, then array shape
          archive_url=""
          if jq -e 'has("artifacts")' "$ARTIFACTS_JSON" >/dev/null 2>&1; then
            echo "Detected object shape with .artifacts"
            archive_url=$(jq -r --arg NAME "$name" '.artifacts[] | select(.name==$NAME) | .archive_download_url' "$ARTIFACTS_JSON" || true)
            jq -r '.artifacts[] | "\(.id) \(.name) \(.size_in_bytes) \(.archive_download_url)"' "$ARTIFACTS_JSON" > /tmp/artifacts.list || true
          else
            echo "Detected top-level array shape or unexpected structure"
            archive_url=$(jq -r --arg NAME "$name" '.[] | select(.name==$NAME) | .archive_download_url' "$ARTIFACTS_JSON" || true)
            jq -r '.[] | "\(.id) \(.name) \(.size_in_bytes) \(.archive_download_url)"' "$ARTIFACTS_JSON" > /tmp/artifacts.list || true
          fi

          if [ -s /tmp/artifacts.list ]; then
            echo "Artifacts found:"
            cat /tmp/artifacts.list
          else
            echo "No artifacts listed for run $run_id"
          fi

          if [ -z "$archive_url" ] || [ "$archive_url" = "null" ]; then
            echo "ERROR: artifact named '$name' not found for run $run_id" >&2
            exit 1
          fi

          echo "Found archive url for $name; downloading via direct artifact URL..."
          mkdir -p ./artifact
          # request binary
          curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$archive_url" -o ./artifact/artifact.zip
          echo "Downloaded to ./artifact/artifact.zip (size: $(stat -c%s ./artifact/artifact.zip 2>/dev/null || echo unknown))"

          # extract the downloaded archive and handle nested bundle.zip if present
          unzip -o ./artifact/artifact.zip -d ./artifact >/dev/null || true
          if [ -f ./artifact/bundle.zip ]; then
            mkdir -p ./artifact/inner && unzip -o ./artifact/bundle.zip -d ./artifact/inner >/dev/null || true
            echo "Nested bundle.zip extracted to ./artifact/inner"
          fi

          echo "Listing ./artifact (post-extract):"
          find ./artifact -maxdepth 3 -type f -printf "%P\n"
          echo "downloaded=ok" >> $GITHUB_OUTPUT

      - name: Re-upload artifact into this workflow (so deploy job can access it)
        uses: actions/upload-artifact@v4
        with:
          name: lambda-bundle
          path: ./artifact/*

  deploy:
    needs: fetch-artifact
    uses: jamesandrewmyers/aws-devops/.github/workflows/cdk-deploy-env.yml
    with:
      artifact-name: 'lambda-bundle'
      cdk-dir: 'cdk'
      stack: 'api-service-test-dev'
      aws-account: '444101352833'
      aws-region: 'us-west-2'
      role-to-assume: 'arn:aws:iam::444101352833:role/gha-cdk-deploy-dev'
